{"version":3,"sources":["sass/modules/auth/register.module.scss","pages/auth/Login.jsx"],"names":["module","exports","connect","state","user","signInUser","userLoading","userLoadingDone","history","location","useEffect","push","intent","useState","email","setEmail","password","setPassword","undefined","phoneNumber","setPhoneNumber","popup","setPopup","addToast","useToasts","setUpRecaptcha","window","recaptchaVerifier","firebaseObj","auth","RecaptchaVerifier","size","callback","response","console","log","defaultCountry","handlePhoneSubmit","a","appVerifier","num","signInWithPhoneNumber","then","e","code","prompt","confirm","result","handleSubmit","catch","err","message","appearance","autoDismiss","preventDefault","signInWithEmailAndPassword","getIdTokenResult","token","createOrUpdateUser","mongoResult","userObj","data","roleBasedRedirect","className","styles","wrapper","id","title","visible","confirmLoading","onCancel","onOk","okText","onSubmit","type","name","autoFocus","placeholder","required","value","onChange","target","style","fontSize","form","to","formButton","loading","onClick","disabled","danger","icon","shape","signInWithPopup","googleAuthProvider"],"mappings":"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","file":"static/js/30.6470acec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"register_wrapper__vqxz4\",\"form\":\"register_form__nM-1g\",\"formButton\":\"register_formButton__3M6PN\"};","/* eslint-disable react/prop-types */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { auth, googleAuthProvider ,firebaseObj} from \"../../firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"../../sass/modules/auth/register.module.scss\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { Button ,Modal} from \"antd\";\r\nimport { GoogleCircleFilled ,PhoneFilled} from \"@ant-design/icons\";\r\n\r\nimport {createOrUpdateUser,roleBasedRedirect} from \"../../functions/auth.function\";\r\n\r\nimport {\r\n  signInUser,\r\n  userLoading,\r\n  userLoadingDone,\r\n} from \"../../redux/actions/userActions\";\r\n\r\nconst Login = function ({\r\n  signInUser,\r\n  userLoading,\r\n  userLoadingDone,\r\n  history,\r\n  user,\r\n  location\r\n}) {\r\n  useEffect(() => {\r\n    if (user.user) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [user]);\r\n\r\n  const intent = location.state;\r\n\r\n\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [phoneNumber,setPhoneNumber] = useState(undefined);\r\n  const [popup,setPopup] = useState(false);\r\n\r\n  const { addToast } = useToasts();\r\n\r\n  const setUpRecaptcha = () => {\r\n    window.recaptchaVerifier = new firebaseObj.auth.RecaptchaVerifier(\r\n      \"recaptcha-container\",\r\n      {\r\n        size: \"invisible\",\r\n        callback: function (response) {\r\n          console.log(\"Captcha Resolved\");\r\n          // handlePhoneSubmit();\r\n        },\r\n        defaultCountry: \"IN\",\r\n      }\r\n    );\r\n  };\r\n\r\n  useEffect(()=>{\r\n  setUpRecaptcha();\r\n    setUpRecaptcha();\r\n  },[])\r\n  \r\n  const handlePhoneSubmit = async()=>{\r\n    userLoading();\r\n    \r\n    let appVerifier = window.recaptchaVerifier;\r\n    let num = \"+91\" + phoneNumber;\r\n    console.log(num);\r\n    auth.signInWithPhoneNumber(num,appVerifier).then(e=>{\r\n      let code = prompt(\"Enter OTP\");\r\n      if( code === null ) return;\r\n      e.confirm(code).then(result=>{\r\n        userLoadingDone();\r\n        handleSubmit(null,result);\r\n\r\n      }).catch(err =>{\r\n        addToast(err.message,{appearance : \"error\" , autoDismiss : true})\r\n        userLoadingDone();\r\n\r\n      })\r\n    }).catch(err =>{\r\n      addToast(err.message,{appearance : \"error\" , autoDismiss : true})\r\n\r\n      userLoadingDone();\r\n\r\n    });\r\n\r\n  }\r\n\r\n  \r\n\r\n  const loginWithPhone = () =>{\r\n    return <form onSubmit={handlePhoneSubmit}>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"phoneNumber\"\r\n        className=\"form-control\"\r\n        autoFocus\r\n        placeholder=\"Enter Phone Number\"\r\n        required\r\n        value={phoneNumber}\r\n        onChange={(e) => setPhoneNumber(e.target.value)}\r\n        style={{fontSize : \"3rem\"}}\r\n      />\r\n\r\n      <br />\r\n\r\n\r\n\r\n\r\n  </form>\r\n  }\r\n\r\n  const handleSubmit = async (e,user) => {\r\n    if(e){\r\n      e.preventDefault();\r\n    }\r\n\r\n    try {\r\n      userLoading();\r\n      let result ;  \r\n      if(!user){\r\n        result = await auth.signInWithEmailAndPassword(email, password);\r\n      }else{\r\n        result = user;\r\n      }\r\n      const token = await result.user.getIdTokenResult();\r\n      const mongoResult = await createOrUpdateUser(token.token);\r\n      const userObj = {\r\n        token: token.token,\r\n        user: mongoResult.data,\r\n      };\r\n\r\n      signInUser(userObj);\r\n\r\n      roleBasedRedirect(mongoResult.data,history,intent);\r\n\r\n    } catch (err) {\r\n      addToast(err.message, { appearance: \"error\", autoDismiss: true });\r\n      userLoadingDone();\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogin = () => {\r\n    userLoading();\r\n    auth\r\n      .signInWithPopup(googleAuthProvider)\r\n      .then(async (result) => {\r\n        const token = await result.user.getIdTokenResult();\r\n        const mongoResult = await createOrUpdateUser(token.token);\r\n        const userObj = {\r\n          token: token.token,\r\n          user: mongoResult.data,\r\n        };\r\n        signInUser(userObj);\r\n        roleBasedRedirect(mongoResult.data,history,intent);\r\n\r\n      })\r\n      .catch((err) => {\r\n        addToast(err.message, { appearance: \"error\", autoDismiss: true });\r\n        userLoadingDone();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n        <div id=\"recaptcha-container\"></div>\r\n\r\n      <Modal\r\n        title=\"Phone Authentication\"\r\n        visible={popup}\r\n        confirmLoading={user.userLoading}\r\n        onCancel={()=>{setPopup(false)}}\r\n        // onOk=loading={user.userLoading}\r\n        onOk={()=>{handlePhoneSubmit() ; setPopup(false)}}\r\n        okText=\"Get OTP\"\r\n      >\r\n        {\r\n          loginWithPhone()\r\n        }\r\n      </Modal>\r\n\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div className={styles.form}>\r\n          <h1>Welcome back </h1>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            className=\"form-control\"\r\n            autoFocus\r\n            placeholder=\"E-mail\"\r\n            required\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          <br />\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            className=\"form-control\"\r\n            placeholder=\"Password\"\r\n            required\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n\r\n          <Link to=\"/resetpassword\">forgot password?</Link>\r\n\r\n          <Button\r\n            className={styles.formButton}\r\n            loading={user.userLoading}\r\n            onClick={handleSubmit}\r\n            disabled={!email || !password}\r\n          >\r\n            Login\r\n          </Button>\r\n          <br />\r\n\r\n          <Button\r\n            danger\r\n            type=\"primary\"\r\n            icon={<GoogleCircleFilled />}\r\n            shape=\"round\"\r\n            onClick={handleGoogleLogin}\r\n          >\r\n            Login with google\r\n          </Button>\r\n          <br/>\r\n          <Button\r\n            \r\n            type=\"primary\"\r\n            icon={<PhoneFilled />}\r\n            shape=\"round\"\r\n            onClick={()=>setPopup(true)}\r\n          >\r\n            Login with phoneNumber\r\n          </Button>\r\n\r\n          <br />\r\n          <p>\r\n            New here?{\" \"}\r\n            <Link to=\"/register\">\r\n              <span>Signup</span>\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  signInUser,\r\n  userLoading,\r\n  userLoadingDone,\r\n})(Login);\r\n"],"sourceRoot":""}